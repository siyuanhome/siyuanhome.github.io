[{"title":"jenins_CICD","url":"/posts/52747/","content":"# Jenkins构建CI/CD\n\n### CI/CD是什么？\n\n  CI(Continuous integration，中文意思是持续集成)是一种软件开发时间。持续集成强调开发人员提交了新代码之后，立刻进行构建、测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。\n\nCD(Continuous Delivery， 中文意思持续交付)是在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境中。比如，我们完成测试后，可以把代码部署到连接数据库的环境中更多的测试。如果代码没有问题，可以继续手动部署到生产环境。\n\n**持续集成/持续发布**---开发(git) -->git主库-->jenkins(git+jdk+tomcat+maven打包+测试）-->发布到tomcat服务器 \n\n### 为什么要 CI / CD 方法简介\n\n软件开发的连续方法基于自动执行脚本，以最大限度地减少在开发应用程序时引入错误的可能性。从新代码的开发到部署，它们需要较少的人为干预甚至根本不需要干预。\n\n它涉及在每次小迭代中不断构建，测试和部署代码更改，从而减少基于有缺陷或失败的先前版本开发新代码的机会。\n\n这种方法有三种主要方法，每种方法都根据最适合您的策略进行应用。\n\n**持续集成**(Continuous Integration, CI):  代码合并，构建，部署，测试都在一起，不断地执行这个过程，并对结果反馈。\n\n**持续部署**(Continuous Deployment, CD):　部署到测试环境、预生产环境、生产环境。　\n\n**持续部署**(Continuous Delivery, CD):  将最终产品发布到生产环境、给用户使用。\n\n## 一、jenkins介绍\n\n Jenkins是帮我们将代码进行统一的编译打包、还可以放到tomcat容器中进行发布。\n我们通过配置，将以前：编译、打包、上传、部署到Tomcat中的过程交由Jenkins，Jenkins通过给定的代码地址URL，将代码拉取到其“宿主服务器”（Jenkins的安装位置），进行编译、打包和发布到web容器中。\n\n##### 1、Jenkins概述\n\n    是一个开源的、提供友好操作界面的持续集成(CI)工具，主要用于持续、自动的构建的一些定时执行的任务。Jenkins用Java语言编写，可在Tomcat等流行的容器中运行，也可独立运行。\n**jenkins通常与版本管理工具(SCM)、构建工具结合使用；常用的版本控制工具有SVN、GIT。jenkins构建工具有Maven、Ant、Gradle。**\n\n##### 2、Jenkins目标\n\n① 持续、自动地构建/测试软件项目。\n\n② 监控软件开放流程，快速问题定位及处理，提高开发效率。\n\n##### 3、Jenkins特性\n\n```shell\n1.易于安装   # 不需要安装、不需要数据库，只需通过java  -jar jenkins.war或部署到一个servlet容器中\n2.易于配置   #所有的配置都可能通过jenkins提供的web界面完成，当然如果你喜欢，也可以通过手动修改xml文件进行配置\n3.文件识别  # jenkins能跟踪每次构建生成哪些jar包以及使用哪个版本的jar包\n4.分布式构建  # 支持Jenkins能够让多台计算机一起构建/测试。\n5.任务（Job）和构建(build) #任务：(Job)是Jenkins的一个执行计划，是一系列操作的集合。构建：是Jenkins的任务的一次运行。\n6.插件支持  # jenkins可以通过第三方插件扩展，也可以根据团队需要开发插件\n```\n\n工作流程图:\n\n![1569246908031](assets/1569246908031.png)\n\n```shell\n测试环境中：\n1.开发者会将代码上传到版本库中。\n2.jenkins通过配置版本库的连接地址，获取到源代码。\n3.jenkins获取到源代码之后通过参数化构建(或者触发器)开始编译打包。\n4.jenkins通过调用\"maven（Ant或者Gradle）命令实现编译打包过程。\n5.生成的war包通过ssh插件上传到远程tomcat服务器中通过shell脚本自动发布项目。\n生产环境：\n测试环境将项目测试没问题后，将项目推送到线上正式环境。\n1.可以选择手动。\n2.也可以通过调用脚本推送过去。\n```\n\n##### 4、产品发布流程\n\n产品设计成型 -> 开发人员开发代码 -> 测试人员测试功能 -> 运维人员发布上线\n\n持续集成（Continuous integration，简称CI）\n\n持续交付（Continuous delivery）\n\n持续部署（continuous deployment） \n\n![1583060962747](assets/1583060962747.png)\n\n\n\n\n\n## 二、部署应用\n\n## Jenkins+Github+Tomcat实战\n\n##### 准备环境:\n\n两台机器\n\ngit-server    ----https://github.com/bingyue/easy-springmvc-maven    git仓库的地址\n\njenkins-server    ---192.168.246.212---最好是3个G以上\n\njava-server   -----192.168.246.210    \n\nhttps://github.com/bingyue/easy-springmvc-maven\n\n##### 1.部署jenkins服务器\n\njenkins-server    ---192.168.246.212操作如下：\n\n```shell\n安装git客户端:\n[root@jenkins-server ~]# yum install -y git   #安装git客户端\n[root@jenkins-server ~]# ssh-keygen\n[root@jenkins-server ~]# ssh-copy-id -i root@192.168.246.210   #拷贝到后端java服务器\n\n开始部署jenkins：\n1.上传jdk\n[root@jenkins-server ~]# tar xzf jdk-8u211-linux-x64.tar.gz -C /usr/local/\n[root@jenkins-server ~]# cd /usr/local/\n[root@jenkins-server local]# mv jdk1.8.0_211/ java\n\n2.安装tomcat\n[root@jenkins-server ~]# wget http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.42/bin/apache-tomcat-8.5.45.tar.gz        #可以上传包\n[root@jenkins-server ~]# tar xzf apache-tomcat-8.5.45.tar.gz -C /usr/local/\n[root@jenkins-server ~]# cd /usr/local/ \n[root@jenkins-server local]# mv apache-tomcat-8.5.45/ tomcat\n\n3.安装maven\n[root@jenkins-server ~]# wget http://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz       #可以上传包\n[root@jenkins-server ~]# tar xzf apache-maven-3.5.4-bin.tar.gz -C /usr/local/java\n[root@jenkins-server ~]# cd /usr/local/java\n[root@jenkins-server java]# mv apache-maven-3.5.4/ maven\n\n设置变量:\n[root@jenkins-server ~]# vim /etc/profile\nJAVA_HOME=/usr/local/java\nMAVEN_HOME=/usr/local/java/maven\nPATH=$PATH:$JAVA_HOME/bin:$MAVEN_HOME/bin\nexport PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL JAVA_HOME MAVEN_HOME\n\n[root@jenkins-server ~]# source /etc/profile\n\n验证:\n[root@jenkins-server ~]# java -version \njava version \"1.8.0_211\"\nJava(TM) SE Runtime Environment (build 1.8.0_211-b12)\nJava HotSpot(TM) 64-Bit Server VM (build 25.211-b12, mixed mode)\n\n[root@jenkins-server ~]# mvn -v   #查看maven的版本信息\nApache Maven 3.5.4 (1edded0938998edf8bf061f1ceb3cfdeccf443fe; 2018-06-18T02:33:14+08:00)\nMaven home: /usr/local/java/maven\nJava version: 1.8.0_191, vendor: Oracle Corporation, runtime: /usr/local/java/jre\nDefault locale: en_US, platform encoding: UTF-8\nOS name: \"linux\", version: \"3.10.0-693.el7.x86_64\", arch: \"amd64\", family: \"unix\"\n\n下载jenkins的安装包:\n安装jenkins:2.196  ----通过官网直接下载war包。\n官网:http://updates.jenkins-ci.org/download/war/\n[root@jenkins-server ~]# wget http://updates.jenkins-ci.org/download/war/2.196/jenkins.war     #可以上传包\n部署jenkins\n[root@jenkins-server ~]# cd /usr/local/tomcat/webapps/\n[root@jenkins-server webapps]# rm -rf * \n[root@jenkins-server webapps]# cp /root/jenkins.war .\n[root@jenkins-server webapps]# ../bin/startup.sh   #启动tomcat，../bin/shutdown.sh关闭 \nUsing CATALINA_BASE:   /usr/local/tomcat\nUsing CATALINA_HOME:   /usr/local/tomcat\nUsing CATALINA_TMPDIR: /usr/local/tomcat/temp\nUsing JRE_HOME:        /usr/local/java\nUsing CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar\nTomcat started.\n\n[root@jenkins-server ~]# netstat -lntp  |grep java            #查看tomcat状态\ntcp6       0      0 :::8080                 :::*                    LISTEN      73144/java          \ntcp6       0      0 127.0.0.1:8005          :::*                    LISTEN      73144/java \n```\n\n**如果启动了访问提示**\n\n访问 http://192.168.246.212:8080/jenkins\n\n![1564326097865](assets/1564326097865.png)\n\n\n\n如果访问失败，解决办法如下：\n\n```shell\n[root@jenkins-server ~]# cd /usr/local/tomcat/conf/\n[root@jenkins-server conf]# vim context.xml  -----添加如下内容:\n    <Resources\n        cachingAllowed=\"true\"\n        cacheMaxSize=\"100000\"\n    />\n```\n\n![1564326085131](assets/1564326085131.png)\n\n重启tomcat\n\n如果还是不行:\n\n```shell\n[root@jenkins ~]# cd .jenkins/updates/ 到jenkins的工作目录下\n[root@jenkins updates]# vim default.json\n把 \"connectionCheckUrl\":\"http://www.google.com/\" 改为  \"connectionCheckUrl\":\"http://www.baidu.com/\"\n```\n\n要是还是不行:\n\n```shell\n需要你进入jenkins的工作目录，打开-----hudson.model.UpdateCenter.xml\n把http://updates.jenkins-ci.org/update-center.json\n改成\nhttp://mirror.xmission.com/jenkins/updates/update-center.json\n每次改完记得重启！\n```\n\n使用运行war的形式安装jenkins，因为伟大的墙出现，“该jenkins实例似乎已离线” 问题：\n\n解决办法：\n\n```shell\n\n需要你进入jenkins的工作目录，打开-----hudson.model.UpdateCenter.xml将 url 中的 https://updates.jenkins.io/update-center.json 更改为http://updates.jenkins.io/update-center.json，即去掉 https 中的 s 。\n或者更改为https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json\n是国内的清华大学的镜像地址。\n然后重启tomcat\n```\n\n======================================================================\n\n##### 2.访问界面:   ---需要多等一会\n\n<http://192.168.246.212:8080/jenkins>\n\n![1564325564350](assets/1564325564350.png)\n\n```shell\n[root@jenkins-server ~]# cat /opt/jenkins/secrets/initialAdminPassword\nb36b8b04c5b84e659701304dfe848999    ---复制这个密码粘贴到上面提示的空格里面。\n```\n\n![1564325665439](assets/1564325665439.png)\n\n下面需要很长很长一段时间（大约两个小时），耐心等候即可\n\n![1564333022739](assets/1564333022739.png)\n\n如果嫌弃安装慢可以进行如下操作：\n\n```shell\n[root@jenkins-server ~]#  /usr/local/tomcat/bin/shutdown.sh  #关闭tomcat\nUsing CATALINA_BASE:   /usr/local/tomcat\nUsing CATALINA_HOME:   /usr/local/tomcat\nUsing CATALINA_TMPDIR: /usr/local/tomcat/temp\nUsing JRE_HOME:        /usr/local/java\nUsing CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar\n\n[root@jenkins-server ~]# cd /root/.jenkins\n[root@jenkins-server .jenkins]# mv plugins/ plugins.bak\n[root@jenkins-server .jenkins]# cd /usr/src\n                         #上传包 plugins.tar.gz\n[root@jenkins-serve src]# ls\n plugins.tar.gz\n[root@jenkins-serve src]# tar -xzf plugins.tar.gz -C /root/.jenkins/    #解压\n[root@jenkins-serve src]# /usr/local/tomcat/bin/startup.sh   #启动tomcat\nUsing CATALINA_BASE:   /usr/local/tomcat\nUsing CATALINA_HOME:   /usr/local/tomcat\nUsing CATALINA_TMPDIR: /usr/local/tomcat/temp\nUsing JRE_HOME:        /usr/local/java\nUsing CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar\nTomcat started.\n```\n\n再次启动tomcat会显示如下：\n\n![](assets\\QQ图片20200507120319.png)\n\n再次让输入密码\n\n![1564325564350](assets/1564325564350.png)\n\n```shell\n[root@jenkins-server ~]# cat /opt/jenkins/secrets/initialAdminPassword\nb36b8b04c5b84e659701304dfe848999    ---复制这个密码粘贴到上面提示的空格里面。\n```\n\n![](assets\\QQ图片20200507120621.png)\n\n\n\n用户名：admin\n\n密码：123456\n\n全名：123\n\n邮箱：123@.com\n\n![1564333246959](assets/1564333246959.png)\n\n实例配置：http://192.168.246.212:8080/jenkins/        (jenkins-server 服务器的ip地址，这里是本服务器的ip)\n\n![1564333308573](assets/1564333308573.png)\n\n\n\n![1564333339797](assets/1564333339797.png)\n\n##### 3.安装插件\n\n**注意：上传的plugins.tar.gz包中含有以下插件，无须再安装插件**\n\n```shell\n安装插件:\n所需的插件:\n• Maven插件 Maven Integration plugin\n• 发布插件 Deploy to container Plugin\n需要安装插件如下：\n=====================================================================================\n安装插件Deploy to container    ---支持自动化代码部署到tomcat容器\nGIT pligin  可能已经安装\nMaven Integration   :jenkins利用Maven编译，打包所需插件\nPublish Over SSH  :通过ssh连接\nssh  插件\n安装过程:\n系统管理--->插件管理---->可选插件--->过滤Deploy to container---->勾选--->直接安装\n```\n\n![1564333462537](assets/1564333462537.png)\n\n![1564333548629](assets/1564333548629.png)\n\n![1564333661844](assets/1564333661844.png)\n\n输入插件名后按回车！\n\n然后等待安装完成，点击返回首页\n\n![1564333727435](assets/1564333727435.png)\n\n再次安装插件\n\n![1564333796321](assets/1564333796321.png)\n\n![1564333846376](assets/1564333846376.png)\n\n![1564333976950](assets/1564333976950.png)\n\n![1564334089020](assets/1564334089020.png)\n\n以上所有插件安装完成\n\n开始配置ssh\n\n![1564334209886](assets/1564334209886.png)\n\n邮箱（可选）\n\n![1564334251756](assets/1564334251756.png)\n\n![1585226907331](assets/1585226907331.png)\n\n![1583230332054](assets/1583230332054.png)\n\n![1583230568264](assets/1583230568264.png)\n\n![1583230594109](assets/1583230594109.png)\n\n授权码：FLVGDHEJOKEWPQRX\n\n![1585226958548](assets/1585226958548.png)\n\n\n\n在最下面配置用户私钥:\n\n![1564334451379](assets/1564334451379.png)\n\n  key:指的是jenkins服务器用哪个用户去远程连接程序服务器就是那个用户的私钥。\n\njenkins-server    ---192.168.246.212这台服务器\n\n```shell\n[root@jenkins-server ~]# cat .ssh/id_rsa\n```\n\n#####  4.添加远程ssh-server:\n\n**注意：远程连接的是分发过公钥的服务器的ip，这里的ip是java-server  192.168.246.210这台服务器的ip地址**\n\n![1564334945023](assets/1564334945023.png)\n\n##### 5.扩展：邮件通知（用于项目构建后发送邮件）\n\n![image-20200507094318032](assets/image-20200507094318032.png)\n\n![image-20200506171824265](assets/image-20200506171824265.png)\n\n![image-20200507094441208](assets/image-20200507094441208.png)\n\n![image-20200507101226286](assets/image-20200507101226286.png)\n\n\n\n```shell\n邮件主题：\n构建通知:${BUILD_STATUS} - ${PROJECT_NAME} - Build # ${BUILD_NUMBER} !\n```\n\n```shell\n邮件内容：\n<!DOCTYPE html>    \n<html>    \n<head>    \n<meta charset=\"UTF-8\">    \n<title>${ENV, var=\"JOB_NAME\"}-第${BUILD_NUMBER}次构建日志</title>    \n</head>    \n    \n<body leftmargin=\"8\" marginwidth=\"0\" topmargin=\"8\" marginheight=\"4\"    \n    offset=\"0\">    \n    <table width=\"95%\" cellpadding=\"0\" cellspacing=\"0\"  style=\"font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif\">    \n        <tr>    \n            本邮件由系统自动发出，无需回复！<br/>            \n            各位同事，大家好，以下为${PROJECT_NAME }项目构建信息</br> \n            <td><font color=\"#CC0000\">构建结果 - ${BUILD_STATUS}</font></td>   \n        </tr>    \n        <tr>    \n            <td><br />    \n            <b><font color=\"#0B610B\">构建信息</font></b>    \n            <hr size=\"2\" width=\"100%\" align=\"center\" /></td>    \n        </tr>    \n        <tr>    \n            <td>    \n                <ul>    \n                    <li>项目名称 ： ${PROJECT_NAME}</li>    \n                    <li>构建编号 ： 第${BUILD_NUMBER}次构建</li>    \n                    <li>触发原因： ${CAUSE}</li>    \n                    <li>构建状态： ${BUILD_STATUS}</li>    \n                    <li>构建日志： <a href=\"${BUILD_URL}console\">${BUILD_URL}console</a></li>    \n                    <li>构建  Url ： <a href=\"${BUILD_URL}\">${BUILD_URL}</a></li>    \n                    <li>工作目录 ： <a href=\"${PROJECT_URL}ws\">${PROJECT_URL}ws</a></li>    \n                    <li>项目  Url ： <a href=\"${PROJECT_URL}\">${PROJECT_URL}</a></li>    \n                </ul>    \n\n<h4><font color=\"#0B610B\">失败用例</font></h4>\n<hr size=\"2\" width=\"100%\" />\n$FAILED_TESTS<br/>\n\n<h4><font color=\"#0B610B\">最近提交(#$SVN_REVISION)</font></h4>\n<hr size=\"2\" width=\"100%\" />\n<ul>\n${CHANGES_SINCE_LAST_SUCCESS, reverse=true, format=\"%c\", changesFormat=\"<li>%d [%a] %m</li>\"}\n</ul>\n详细提交: <a href=\"${PROJECT_URL}changes\">${PROJECT_URL}changes</a><br/>\n\n            </td>    \n        </tr>    \n    </table>    \n</body>    \n</html>\n```\n\n设置邮箱触发器\n\n![image-20200507101710544](assets/image-20200507101710544.png)\n\n可根据实际情况选择触发条件，此处选择 总是\n\n![image-20200507101806877](assets/image-20200507101806877.png)\n\n管理监控配置--->系统管理员邮件地址：along@163.com，要和下面的用户名一致；\n\n邮件通知，配置如下：可以点击测试，是否配置成功\n\n![image-20200506172333414](assets/image-20200506172333414.png)\n\n![image-20200507094735363](assets/image-20200507094735363.png)\n\n##### 6.配置jdk，maven命令，全局配置\n\n![1564335018840](assets/1564335018840.png)\n\n![1570960064941](assets/1570960064941.png)\n\n![1570960081945](assets/1570960081945.png)\n\n![1564335123190](assets/1564335123190.png)\n\n\n\n![1564335192681](assets/1564335192681.png)\n\n##### 7.构建发布任务\n\n![1564335261703](assets/1564335261703.png)\n\n![1564335284215](assets/1564335284215.png)\n\n![1564335352695](assets\\QQ图片20200507213800.png)\n\n如下填写git-server仓库的地址   https://github.com/bingyue/easy-springmvc-maven\n\n![1564341315628](assets/1564341315628.png)\n\n![1564335657071](assets/1564335657071.png)\n\n![1564335823407](assets\\QQ图片20200507154031.png)\n\n##### 8.调用maven命令\n\n![1564336901231](assets/1564336901231.png)\n\n![1585227495268](assets/1585227495268.png)\n\n##### **9.配置构建后操作模块**\n\n![image-20200507102158546](assets/image-20200507102158546.png)\n\n![image-20200507102745939](assets/image-20200507102745939.png)\n\n![image-20200507102817088](assets/image-20200507102817088.png)\n\n![image-20200507102952918](assets/image-20200507102952918.png)\n\n![image-20200507103026948](assets/image-20200507103026948.png)\n\n\n\n##### 10.部署java服务器，做jenkins打包上线\n\njava-server   -----192.168.246.210 操作如下：\n\n```shell\n[root@java-server ~]# mkdir -p /data/application\n\n#先上传jdk包\n[root@java-server ~]# tar xzf jdk-8u211-linux-x64.tar.gz -C /usr/local/\n[root@java-server ~]# cd /usr/local/\n[root@java-server local]# mv jdk1.8.0_211/ java\n[root@java-server local]# cd\n\n下载tomcat\n[root@java-server ~]# wget http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.42/bin/apache-tomcat-8.5.45.tar.gz    #建议上传tomcat包\n[root@java-server ~]# tar xzf apache-tomcat-8.5.45.tar.gz -C /data/application/\n[root@java-server ~]# cd /data/application/\n[root@java-server application]# mv apache-tomcat-8.5.45/ tomcat\n[root@java-server application]# cd\n\n设置环境变量\n[root@java-server ~]# vim /etc/profile    #最后面添加如下内容\nexport JAVA_HOME=/usr/local/java\nexport PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH\nexport CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib:$JAVA_HOME/lib/tools.jar\nexport TOMCAT_HOME=/data/application/tomcat\n[root@java-server ~]# source /etc/profile\n\n测试:\n[root@java-server ~]# java -version \njava version \"1.8.0_211\"\nJava(TM) SE Runtime Environment (build 1.8.0_211-b12)\nJava HotSpot(TM) 64-Bit Server VM (build 25.211-b12, mixed mode)\n\n删除tomcat默认发布目录下面的内容:\n[root@java-server ~]# rm -rf /data/application/tomcat/webapps/*\n[root@java-server ~]# cd /data/application/tomcat/webapps/\n[root@java-server webapps]# ls\n[root@java-server webapps]# cd\n\n创建目录和脚本:  #特别注意：一定要对应构造环境中SSH Server的目录和脚本名称\n[root@java-server ~]# mkdir /opt/script  #创建脚本目录\n[root@java-server ~]# vim app-jenkins.sh   #创建脚本，脚本内容在后面\n[root@java-server ~]# chmod +x app-jenkins.sh  #添加执行权限\n[root@java-server ~]# mv app-jenkins.sh /opt/script/\n脚本内容如下:\n[root@java-server ~]# cd  /opt/script/\n[root@java-server script]# cat app-jenkins.sh   #查看脚本内容\n#!/usr/bin/bash\n#本脚本适用于jenkins持续集成，实现备份war包到代码更新上线！使用时请注意全局变量。\n#================\n#Defining variables\nexport JAVA_HOME=/usr/local/java\nwebapp_path=\"/data/application/tomcat/webapps\"\ntomcat_run=\"/data/application/tomcat/bin\"\nupdata_path=\"/data/update/`date +%F-%T`\"\nbackup_path=\"/data/backup/`date +%F-%T`\"\ntomcat_pid=`ps -ef | grep tomcat | grep -v grep | awk '{print $2}'`\nfiles_dir=\"easy-springmvc-maven\"\nfiles=\"easy-springmvc-maven.war\"\njob_path=\"/root/upload\"\n\n#Preparation environment\necho \"Creating related directory\"\nmkdir -p $updata_path\nmkdir -p $backup_path\n\necho \"Move the uploaded war package to the update directory\"\nmv $job_path/$files $updata_path\n\necho \"=========================================================\"\ncd /opt\necho \"Backing up java project\"\nif [ -f $webapp_path/$files ];then\n\ttar czf $backup_path/`date +%F-%H`.tar.gz $webapp_path\n\tif [ $? -ne 0 ];then\n\t\techo \"打包失败，自动退出\"\n\t\texit 1\n\telse\n\t\techo \"Checking if tomcat is started\"\n\t\tif [ -n \"$tomcat_pid\" ];then\n\t\t\tkill -9 $tomcat_pid\n\t\t\tif [ $? -ne 0 ];then\n\t\t\t\techo \"tomcat关闭失败，将会自动退出\"\n\t\t\t\texit 2\n\t\t\tfi\n\t\tfi\n\t\tcd $webapp_path\n\t\trm -rf $files && rm -rf $files_dir\n\t\tcp $updata_path/$files $webapp_path\n\t\tcd /opt\n\t\t$tomcat_run/startup.sh\n\t\tsleep 5\n\t\techo \"显示tomcat的pid\"\n\t\techo \"`ps -ef | grep tomcat | grep -v grep | awk '{print $2}'`\"\n\t\techo \"tomcat startup\"\n\t\techo \"请手动查看tomcat日志。脚本将会自动退出\"\n\tfi\nelse\n\techo \"Checking if tomcat is started\"\n        if [ -n \"$tomcat_pid\" ];then\n        \tkill -9 $tomcat_pid\n                if [ $? -ne 0 ];then\n                \techo \"tomcat关闭失败，将会自动退出\"\n                       \texit 2\n                fi\n        fi\n\tcp $updata_path/$files $webapp_path\n\t$tomcat_run/startup.sh\n        sleep 5\n        echo \"显示tomcat的pid\"\n        echo \"`ps -ef | grep tomcat | grep -v grep | awk '{print $2}'`\"\n        echo \"tomcat startup\"\n        echo \"请手动查看tomcat日志。脚本将会自动退出\"\nfi\n```\n\n##### 11.回到jenkins页面开始构建任务\n\n![1564336717415](assets/1564336717415.png)\n\n![1564336734472](assets/1564336734472.png)\n\n![1564336761194](assets/1564336761194.png)\n\n![1564341387433](assets/1564341387433.png)\n\n![1571056070912](assets/1571056070912.png)\n\n##### 12.登陆java-server服务器查看:\n\n```shell\n[root@java-server ~]# netstat -lntp     #查看端口状态\n```\n\n![1564341789289](assets/1564341789289.png)\n\n```shell\n[root@java-server ~]#  cd /data/application/tomcat/webapps\n[root@java-server ~]#  ls\n```\n\n![1564341820575](assets/1564341820575.png)\n\n查看邮箱，可看到消息\n\n![1583236173518](assets\\QQ图片20200507161153.png)\n\n![1583236298592](assets\\QQ图片20200507160936.png)\n\n访问测试  http://192.168.246.210:8080/easy-springmvc-maven           \n\n注意**ip是java-server  192.168.246.210的ip**\n\n![](assets\\QQ图片20200507161724.png)\n\n\n\n##### 13.构建任务完成但是接收不到邮件的解决方法\n\n**解决方法**：如果邮箱接收不到邮件，进行如下操作\n\n![](assets\\QQ图片20200508212646.png)\n\n![](assets\\QQ图片20200508212706.png)\n\n![](assets\\QQ图片20200508212710.png)\n\n如果这样配置**还是接收不到邮件**，请在系统设置把邮件格式改为HTML，如下操作\n\n![](assets\\QQ图片20200508213235.png)\n\n![](assets\\QQ图片20200508213232.png)\n\n\n\n\n\n## Jenkins+Gitlab+Tomcat实战\n\n**在上一实验的基础上进行如下：**\n\n上一实验已经部署完毕：jenkins服务、jdk+tomcat、maven工具\n\n这里因为Jenkins服务器去拉取代码做jenkins打包上线。所以要下载git客户端\n\n```shell\n安装git客户端:\n[root@jenkins-server ~]# yum install -y git   #安装git客户端\n#因为本服务器在上一实验产生私钥了，因此本服务器就不用进行分发拷贝私钥到本服务器\n```\n\n**注意：gitlab部署请参考笔记：版本控制git（部署gitlab）**\n\n**访问gitlab的网站：例如：http://192.168.44.169**\n\n![](assets\\QQ图片20200509100749.png)\n\n![](assets\\QQ图片20200509100837.png)\n\n![1583067401297](assets/1583067401297.png)\n\n开始一个简单的项目\n\n![1583067657276](assets/1583067657276.png)\n\n![1583067754415](assets/1583067754415.png)\n\n![1583067793428](assets/1583067793428.png)\n\n![](assets\\QQ图片20200509094203.png)\n\n![1583067975394](assets/1583067975394.png)\n\n![1583068007505](assets/1583068007505.png)\n\n![1583068086468](assets/1583068086468.png)\n\n![1583068144311](assets/1583068144311.png)\n\n![1583068196797](assets/1583068196797.png)\n\n```shell\n[root@jenkins-server ~]# cat /root/.ssh/id_rsa           #查看Jenkins服务器的私钥\n```\n\n![1583068314971](assets/1583068314971.png)\n\n![1583068382540](assets/1583068382540.png)\n\n![1585279946364](assets/1585279946364.png)\n\n![1585280142108](assets/1585280142108.png)\n\nJenkins端配置好之后，还应该gitlab端配置Jenkins服务器的公钥\n\n在jenkins服务器上查看公钥\n\n```shell\n[root@jenkins-server ~]# cat /root/.ssh/id_rsa.pub    #查看Jenkins服务器的公钥 \n```\n\n![1585221510597](assets/1585221510597.png)\n\n复制粘贴到gitlab\n\n![](assets\\QQ图片20200509101021.png)\n\n![](assets\\QQ图片20200509101109.png)\n\n![](assets\\QQ图片20200509101308.png)\n\n![1585221543706](assets/1585221543706.png)\n\n然后去构建项目。自动拉取代码\n\n![1583068437105](assets/1583068437105.png)\n\n注意看拉取到了哪个目录下\n\n![1583067427222](assets/1583067427222.png)\n\n\n\n在Jenkins服务器上查看\n\n在这个目录下能找到已经拉取git的项目；证明项目成功完成\n\n```shell\n[root@jenkins-server ~]#  ls /root/.jenkins/workspace/demo\nbeifen.sh\n```\n\n## gitlab webhook + jenkins 实现代码自动化发布\n\n```nginx\nWebhook本质上也是API，只不过是反向调用.\n\nWebhook工作原理\n为了及时通知，此时就产生了Webhook这种概念，其实就是为了更好地去通知调用的结果。在我们发出请求的时候，可以向服务器注册一个Webhook的地址，告诉服务器说，等调用结果一出来，第一时间通过这个Webhook地址通知我，我好处理接下来的步骤。\n\n\"webhook(网络钩子)，一般与jenkins联合使用\"，\"gitlab的某个项目的代码更新了后就触发 webhook中配置的 url ，这个url一般是某一个jienkins中某一个job的url。即gitlab代码更新后就会触发 jinkins的任务自动进行构建。\"\n```\n\n###### gitlab部署 略\n\n###### 配置gitlab\n\n密码123456\n\n![image-20200507105840164](assets/image-20200507105840164.png)\n\n创建组\n\n![image-20200507105945675](assets/image-20200507105945675.png)\n\n![image-20200507110120047](assets/image-20200507110120047.png)\n\n![image-20200507110135048](assets/image-20200507110135048.png)\n\n创建一个项目\n\n![image-20200507110209158](assets/image-20200507110209158.png)\n\n![image-20200507110222900](assets/image-20200507110222900.png)\n\n![image-20200509151733670](assets/image-20200509151733670.png)\n\n![image-20200509151812538](assets/image-20200509151812538.png)\n\n###### 构建项目\n\n![image-20200507110455693](assets/image-20200507110455693.png)\n\n![image-20200507110525662](assets/image-20200507110525662.png)\n\n![image-20200509152008141](assets/image-20200509152008141.png)\n\n###### 登录gitlab获取到git仓库地址\n\n![image-20200509152113940](assets/image-20200509152113940.png)\n\n**切换到jenkins界面**\n\n![image-20200509152230943](assets/image-20200509152230943.png)\n\n![image-20200509152625298](assets/image-20200509152625298.png)\n\n```shell\n[root@jenkins-server ~]# useradd jenkins\n[root@jenkins-server ~]# su - jenkins\n[jenkins@jenkins-server ~]$ ssh-keygen\n[jenkins@jenkins-server ~]$ cat .ssh/id_rsa  #查看jenkins用户的私钥\n\n```\n\n![image-20200507113147771](assets/image-20200507113147771.png)\n\n![image-20200509154328901](assets/image-20200509154328901.png)\n\n![image-20200509154344323](assets/image-20200509154344323.png)\n\n\n\n**切换到gitlab的界面**\n\n###### 将jenkins服务器上面的jenkins用户的公钥添加到gitlab中\n\n![image-20200509154445464](assets/image-20200509154445464.png)\n\n![image-20200509154502913](assets/image-20200509154502913.png)\n\n![image-20200509154549201](assets/image-20200509154549201.png)\n\n```shell\n登录到jenkins服务器中\n[jenkins@jenkins-server ~]$ cat .ssh/id_rsa.pub  #查看jenkins用户的公钥\n[jenkins@jenkins-server ~]$ exit   #切换到root用户\n```\n\n![image-20200509154632160](assets/image-20200509154632160.png)\n\n![image-20200509154656904](assets/image-20200509154656904.png)\n\n**切换到jenkins界面**\n\njenkins界面已经ok\n\n![image-20200509154743906](assets/image-20200509154743906.png)\n\n###### 构建触发器\n\n![image-20200509161909357](assets/image-20200509161909357.png)\n\n![image-20200509162124182](assets/image-20200509162124182.png)\n\n**要记录下上边的URL和认证密钥，切换到gitlab，找到对应的git库  点击setting --> webhook ,填写以下内容**\n\n![image-20200509162254966](assets/image-20200509162254966.png)\n\n![image-20200509162306718](assets/image-20200509162306718.png)\n\n![image-20200509162359619](assets/image-20200509162359619.png)\n\n![image-20200509162446109](assets/image-20200509162446109.png)\n\n![image-20200509163833449](assets/image-20200509163833449.png)\n\n![image-20200509164137633](assets/image-20200509164137633.png)\n\n添加完成之后报错\n\n![image-20200509164427019](assets/image-20200509164427019.png)\n\n这是因为gitlab 10.6 版本以后为了安全，不允许向本地网络发送webhook请求，设置如下：\n\n登录管理员账号\n\n![image-20200509165216187](assets/image-20200509165216187.png)\n\n![image-20200509165247487](assets/image-20200509165247487.png)\n\n![image-20200509165330067](assets/image-20200509165330067.png)\n\n###### 然后再次添加webhook\n\n![image-20200509164137633](assets/image-20200509164137633.png)\n\n![image-20200509165512159](assets/image-20200509165512159.png)\n\n###### 回到jenkins页面\n\n![image-20200509165859689](assets/image-20200509165859689.png)\n\n###### 开始测试：模拟开发更新代码到gitlab库\n\n```shell\n我这里在gitlab机器上面测试：\n[root@git-server ~]# ssh-keygen #生成秘钥\n[root@git-server ~]# cat .ssh/id_rsa.pub  #查看生成的公钥添加到gitlab里面去\n```\n\n![image-20200509171550374](assets/image-20200509171550374.png)\n\n```shell\n[root@git-server ~]# git clone git@192.168.153.156:root/test1.git\nCloning into 'test1'...\nremote: Enumerating objects: 6, done.\nremote: Counting objects: 100% (6/6), done.\nremote: Compressing objects: 100% (4/4), done.\nremote: Total 6 (delta 0), reused 0 (delta 0), pack-reused 0\nReceiving objects: 100% (6/6), done.\n\n[root@git-server ~]# ls\nanaconda-ks.cfg  test1  upload\n[root@git-server ~]# cd test1/\n[root@git-server test1]# ls\nREADME.md \n[root@git-server test1]# touch a.txt    #模拟开发编写代码\n[root@git-server test1]# git add .    #放到暂存区\n[root@git-server test1]# git commit -m 'test'   #提交到本地版本库\n[master 2451295] test\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 a.txt\n[root@git-server test1]# git push origin master    #上传到远程仓库的master分支\nCounting objects: 4, done.\nDelta compression using up to 2 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 296 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo git@192.168.153.156:root/test1.git\n   f3848d7..2451295  master -> master\n```\n\n###### 返回到jenkins页面查看是否自动发布\n\n![image-20200509171913723](assets/image-20200509171913723.png)\n\n![image-20200509165828679](assets/image-20200509165828679.png)\n","categories":[],"tags":[]},{"title":"Hello World","url":"/posts/16107/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","categories":[],"tags":[]},{"title":"github+hexo 搭建个人博客","url":"/posts/50416/","content":"***前言***\n\n- 现在国内有很多平台都提供发表博客的服务，零成本，只需要一个账号，并且也不需要搭建维护，博主只管填充内容即可。那么如何看待独立个人博客呢？\n- 一个域名加上服务器就可以做到，它的自由度很高，不受平台限制，包括可以设计布局。如果内容足够硬核，还会被搜索引擎收录，到时输入关键字，弹出自己的博客，岂不快哉！对于想拥有自己独立博客的朋友，请耐心看下去，我会将搭建过程详细的呈现出来。\n\n# 准备工作\n\n> 安装环境\nLinux7.8\nNode12.13.1\nHexo5.2.0\nGit1.8.3.1\n\n## github新建仓库\n首先需要一个git账号，然后创建一个仓库，名字必须是‘用户名.github.io’，设置成公开，注意，以后这个名字就是你的域名了\n\n![](https://cdn.jsdelivr.net/gh/siyuanhome/blog/img/github_repo.png)\n\n------------\n\n\n## 开启GitHub pages设置\n这里选择将你的仓库的主分支启用为Github页面\n\n![](https://cdn.jsdelivr.net/gh/siyuanhome/blog/img/github_page.png)\n\n## 设置ssh免密登录\n- 首先检查本地是否存在密钥，若有则跳过第一步\n\n### 生成ssh密钥，一般在.ssh目录下执行\n\n```shell\nsh-keygen -t rsa -b 2048 -f ssh_key -N ''\n```\n\n### 进入后缀名为.pub的文件，拷贝公钥信息\n\n![](https://cdn.jsdelivr.net/gh/siyuanhome/blog/img/ssh_pub.png)\n\n### 进入github\n\n  ![](https://cdn.jsdelivr.net/gh/siyuanhome/blog/img/ssh1.png)\n### 将内容粘贴进去，标题自取\n\n  ![](https://cdn.jsdelivr.net/gh/siyuanhome/blog/img/ssh2.png)\n\n### 最后验证是否成功\n```shell\nssh -T git@github.com\n```\n- 若出现下面信息，则设置成功\n\n    ![](https://cdn.jsdelivr.net/gh/siyuanhome/blog/img/check_ssh.png)\n\n# 安装Node.js\n- 官方网站：http://nodejs.cn/download/\n\n```shell\nwget https://npm.taobao.org/mirrors/node/v12.13.1/node-v12.13.1-linux-x64.tar.xz\ntar -xvf node-v12.13.1-linux-x64.tar.xz\n```\n\n## 修改文件名（可选）\n```shell\nmv node-v12.13.1-linux-x64 nodejs\n```\n## 检查node是否安装成功,出现版本号代表成功\n```shell\ncd node-v12.13.1-linux-x64\n./bin/node -v\n```\n## 创建node和npm软链接(xxx/为子目录)\n```shell\nln -s /root/xxx//nodejs/bin/node /usr/local/bin/node\nln -s /root/xxx/nodejs/bin/npm /usr/local/bin/npm\n```\n# 安装及配置hexo\n```shell\nnpm install -g hexo-cli\nln -s /root/xxx//nodejs/lib/node_modules/hexo-cli/bin/hexo /usr/local/bin/hexo\n```\n## 检查hexo版本\n- 若出现下面的信息，则安装成功\n\n```shell\n[root@localhost hexo]# hexo -v\nhexo: 5.2.0\nhexo-cli: 4.2.0\nos: Linux 3.10.0-1127.el7.x86_64 linux x64\nnode: 12.13.1\nv8: 7.7.299.13-node.16\nuv: 1.33.1\nzlib: 1.2.11\nbrotli: 1.0.7\nares: 1.15.0\nmodules: 72\nnghttp2: 1.39.2\nnapi: 5\nllhttp: 1.1.4\nhttp_parser: 2.8.0\nopenssl: 1.1.1d\ncldr: 35.1\nicu: 64.2\ntz: 2019c\nunicode: 12.1\n```\n## hexo添加github地址\n- 在测试环境的主目录进入_config.yml文件，在最后加上git服务器地址\n\n```shell\ndeploy:\n  type: git\n  repository: git@github.com:boke/boke.github.io.git\n  branch: master\n  ```\n\n## 安装hexo git插件\n```shell\nnpm install hexo-deployer-git --save\n```\n## 创建博客测试环境\n```shell\nmkdir test\ncd test\nhexo init  #初始化\n```\n\n## hexo常用命令\n```shell\nhexo clean   # 清除缓存文件，想要更换主题或重新生成静态文件时可使用\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate   # 生成静态文件\nhexo server     # 实现本地预览（默认端口4000，curl+c退出）\nhexo deploy     # 上传到git服务器\n```\n\n> 缩写：\n```shell\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n```\n> 组合命令：\n```shell\nhexo s -g #生成并本地预览\nhexo d -g #生成并上传\n```\n\n- 最后在浏览器输入你的域名就会出现测试页面了\n\n![](https://siyuanhome.github.io/asset/img/test.png)\n\n\n# 报错总结\n## 执行相关命令出现的报错\n```shell\n[root@localhost hexo]# hexo g\nINFO  Validating config\nINFO  =======================================\n██╗ ██████╗ █████╗ ██████╗ ██╗   ██╗███████╗\n██║██╔════╝██╔══██╗██╔══██╗██║   ██║██╔════╝\n██║██║     ███████║██████╔╝██║   ██║███████╗\n██║██║     ██╔══██║██╔══██╗██║   ██║╚════██║\n██║╚██████╗██║  ██║██║  ██║╚██████╔╝███████║\n╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝ ╚══════╝\n=============================================\nINFO  === Checking package dependencies ===\nERROR Package bulma-stylus is not installed.\nERROR Package hexo-renderer-inferno is not installed.\nERROR Package hexo-component-inferno is not installed.\nERROR Package inferno is not installed.\nERROR Package inferno-create-element is not installed.\nERROR Please install the missing dependencies your Hexo site root directory:\nERROR npm install --save bulma-stylus@0.8.0 hexo-renderer-inferno@^0.1.3 hexo-component-inferno@^0.10.0 inferno@^7.3.3 inferno-create-element@^7.3.3\nERROR or:\nERROR yarn add bulma-stylus@0.8.0 hexo-renderer-inferno@^0.1.3 hexo-component-inferno@^0.10.0 inferno@^7.3.3 inferno-create-element@^7.3.3\n```\n- 根据提示安装相关依赖\n\n```shell\nnpm install --save bulma-stylus@0.8.0 hexo-renderer-inferno@^0.1.3 hexo-component-inferno@^0.10.0 inferno@^7.3.3 inferno-create-element@^7.3.3\n```\n\n- 若出现下面错误\n\n```shell\n[root@localhost hexo]# hexo d\nINFO  Validating config\nInferno is in development mode.\nINFO  =======================================\n██╗ ██████╗ █████╗ ██████╗ ██╗   ██╗███████╗\n██║██╔════╝██╔══██╗██╔══██╗██║   ██║██╔════╝\n██║██║     ███████║██████╔╝██║   ██║███████╗\n██║██║     ██╔══██║██╔══██╗██║   ██║╚════██║\n██║╚██████╗██║  ██║██║  ██║╚██████╔╝███████║\n╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝ ╚══════╝\n=============================================\nINFO  === Checking package dependencies ===\nINFO  === Checking theme configurations ===\nINFO  === Registering Hexo extensions ===\nERROR Deployer not found: git\n```\n- 则安装hexo git插件\n\n```shell\nnpm install hexo-deployer-git --save\n```\n\n## 若执行hexo clean报错\n```shell\nERROR Local hexo not found in ~/simon\nERROR Try running: 'npm install hexo --save'\n```\n- 则执行npm install hexo --save\n- 再执行hexo clean\n\n## 执行hexo d上传代码报错\n- 上传代码之前，要在测试环境的主目录进入_config.yml文件，在最后加上git服务器地址\n\n```shell\ndeploy:\n  type: git\n  repository: git@github.com:boke/boke.github.io.git\n  branch: master\n```\n\n- 若第一次使用git，则执行\n\n```shell\ngit config --global user.name \"Your Name\"\ngit config --global user.email you@example.com\n```\n**特别注意：yml文件对格式要求很严格，哪怕一个空格，也不要忽视**\n\n\n# 扩展\n- hexo官网主题：https://hexo.io/themes/\n- 在线博客编辑工具：http://pandao.github.io/editor.md/\n\n1. **首先找一个自己中意的主题，找到github代码库，拷贝https地址**\n\n```shell\ncd test/themes\ngit clone https://github.com/jinyaoMa/hexo-theme-mustom.git mustom\n```\n- 根据其模板的说明文档修改样式和插件\n\n2. **修改主配置文件（101行左右）**\n\n```shell\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: mustom    # themes目录下的模板的名称\n```\n3. **重新启动**\n\n```shell\nhexo clean\nhexo d\nhexo g\n```\n","categories":[],"tags":["hexo","github","css","html","nodejs","git"]}]